{"version":3,"sources":["index.js"],"names":[],"mappings":";;AAAA;;;;;;AAEA,SAAS,QAAT,CAAkB,KAAlB,EAAyB;AACvB,MAAI,YAAY,EAAhB;AADuB;AAAA;AAAA;;AAAA;AAEvB,yBAAiB,KAAjB,8HAAwB;AAAA,UAAf,IAAe;;AACtB,YAAM,KAAK,CAAL,CAAN,EAAe,IAAf,CAAoB,KAAK,CAAL,CAApB,EAA6B,OAA7B,CAAqC;AAAA,eAAK,UAAU,IAAV,CAAe,CAAf,CAAL;AAAA,OAArC;AACD;AAJsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKvB,SAAO,SAAP;AACD;;;;;;;;;;AAUD,SAAS,SAAT,CAAmB,IAAnB,EAAyB,IAAzB,EAA+B,KAA/B,EAAsC;AACpC,MAAI,QAAQ,CAAZ;AACA,QAAM,OAAN,CAAc,UAAC,CAAD,EAAI,CAAJ,EAAO,GAAP,EAAe;AAC3B,QAAI,EAAE,OAAO,CAAT,MAAgB,IAApB,EAA0B;AAC3B,GAFD;AAGA,SAAO,KAAP;AACD;;AAED,IAAI,QAAQ,EAAZ;AACA,IAAI,aAAa,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAjB;AACA,IAAI,QAAQ,CAAZ;IACO,IAAc;IAAX,IAAW;IAAR,IAAQ;IAAL,IAAK;;;AAErB,QAAQ,SAAS,CACf,CAAC,CAAD,EAAI,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAAJ,CADe,EAEf,CAAC,CAAD,EAAI,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAAJ,CAFe,EAGf,CAAC,CAAD,EAAI,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAAJ,CAHe,EAIf,CAAC,CAAD,EAAI,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAAJ,CAJe,EAKf,CAAC,CAAD,EAAI,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAAJ,CALe,EAMf,CAAC,CAAD,EAAI,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAAJ,CANe,EAOf,CAAC,CAAD,EAAI,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAAJ,CAPe,CAAT,CAAR;;AAUA,IAAI,QAAQ,KAAK,KAAL,CAAW,MAAM,MAAN,IAAgB,QAAQ,CAAxB,IAA6B,CAAxC,CAAZ;AACA,IAAI,WAAW,UAAf;AACA,IAAI,WAAW,EAAf;AACA,IAAI,UAAU,EAAd;AACA,IAAI,SAAS,EAAb;;AAEA,IAAI,cAAc,EAAlB;;;;;;;AAEA,wBAAc,UAAd,mIAA0B;AAAA,QAAjB,CAAiB;;AACxB,QAAI,QAAQ,MAAR,KAAmB,KAAvB,EAA8B;AAC5B;AACD;AACD,QAAI,QAAQ,UAAU,CAAV,EAAa,CAAb,EAAgB,KAAhB,CAAZ;AACA,gBAAY,CAAZ,IAAiB,KAAjB;AACA,QAAI,SAAS,KAAb,EAAoB;AAClB,cAAQ,IAAR,CAAa,CAAb;AACD;AACF;;;;;;;;;;;;;;;;AAED,OAAO,IAAP,CAAY,WAAZ;;AAEA,QAAQ,GAAR,CAAY,OAAZ,EAAqB,KAArB;AACA,QAAQ,GAAR,CAAY,SAAZ,EAAuB,MAAM,MAA7B;AACA,QAAQ,GAAR,CAAY,OAAZ,EAAqB,KAArB;AACA,QAAQ,GAAR,CAAY,QAAZ,EAAsB,MAAtB;AACA,QAAQ,GAAR,CAAY,SAAZ,EAAuB,OAAvB","file":"all.js","sourcesContent":["import _ from 'lodash'\n\nfunction populate(votes) {\n  let populated = [];\n  for (let vote of votes) {\n    Array(vote[0]).fill(vote[1]).forEach(v => populated.push(v));\n  }\n  return populated;\n}\n\n/**\n * Counts a candidate's votes at a position in the order of preference\n * @param {Number} pref The position of preference at which the votes for the\n * candidate is counted, e.g. `1` to count first-preference votes\n * @param {string} cand Name of the candidate\n * @param {string[][]} votes Votes to be counted\n * @returns {Number}\n */\nfunction countPref(pref, cand, votes) {\n  let count = 0;\n  votes.forEach((v, i, arr) => {\n    if (v[pref - 1] === cand) count++;\n  });\n  return count;\n}\n\nlet votes = [];\nlet candidates = ['a', 'b', 'c', 'd'];\nlet seats = 3;\nconst [a, b, c, d] = candidates;\n\nvotes = populate([\n  [4, [a,b,c,d]],\n  [1, [a,c,d,b]],\n  [2, [b,a,d,c]],\n  [3, [b,a,c,d]],\n  [5, [a,d,b,c]],\n  [4, [c,b,d,a]],\n  [5, [d,c,b,a]],\n]);\n\nvar quota = Math.floor(votes.length / (seats + 1) + 1);\nvar hopefuls = candidates;\nvar excluded = [];\nvar elected = [];\nvar counts = [];\n\nvar roundCounts = {};\n\nfor (let v of candidates) {\n  if (elected.length === seats) {\n    break;\n  }\n  let count = countPref(1, v, votes);\n  roundCounts[v] = count;\n  if (count >= quota) {\n    elected.push(v);\n  }\n}\n\ncounts.push(roundCounts);\n\nconsole.log('votes', votes);\nconsole.log('votes #', votes.length);\nconsole.log('quota', quota);\nconsole.log('counts', counts);\nconsole.log('elected', elected);\n"],"sourceRoot":"/source/"}