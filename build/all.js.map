{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"all.js","sourcesContent":["import 'babel-polyfill';\nimport _ from 'lodash'\n\nlet num = 0;\n\nfunction populate(votes) {\n  let populated = [];\n  for (let vote of votes) {\n    Array(vote[0]).fill(vote[1]).forEach(v => populated.push(v));\n  }\n  return populated;\n}\n\nNumber.prototype.round = function(places) {\n  return +(Math.round(this + 'e+' + places)  + 'e-' + places);\n}\n\n/**\n * A single transferrable vote, containing an array of names of candidates\n * (`string`s) in order of preference indicated, i.e. first-preference vote is\n * at index `0`.\n * @typedef {string[][]} vote\n */\n\n/**\n * Counts a candidate's votes in a position on ranked ballot\n * @param {number} pref The position of preference at which the votes for the\n * candidate is counted, e.g. `pref = 1` to count first-preference votes\n * @param {string} cand Name of the candidate\n * @param {vote[]} votes Votes to be counted\n * @returns {number} Number of votes the candidate receives at the specified\n * position on the ballot\n */\nfunction countPref(pref, cand, votes) {\n  let count = 0;\n  votes.forEach((v, i, arr) => {\n    if (v[pref - 1] === cand) count++;\n  });\n  return count;\n}\n\n/**\n * Does a round of counting for STV\n * @param  {vote[]} votes    Votes to be counted\n * @param  {number} seats    Number of seats available\n * @param  {number} [quota] Quota needed to declared a candidate elected;\n * defaults to Droop quota calculated from `votes.length` and `seats`\n * @param  {string[]} hopefuls List of candidates to be counted, i.e. neither\n * elected nor eliminated\n * @param  {string[]} eliminated List of candidates eliminated from counting\n * @param  {string[]} elected  List of already elected candidates\n * @param  {Object[]} counts   History of votes received by the candidates in\n * previous rounds\n * @param  {Object} [surplus = {}] Surplus votes to be redistributed from last\n * round; defaults to `{}`\n * @return {string[]}          List of all elected candidates after this round\n */\nfunction round(votes, seats, quota = -1, hopefuls, eliminated, elected, counts,\nsurplus = {}) {\n  if (elected.length === seats) {\n    return {\n      elected,\n      counts,\n    }\n  }\n\n  if (quota === -1) {\n    quota = Math.floor(votes.length / (seats + 1) + 1);\n  }\n  let distributed = {};\n  if (Object.keys(surplus).length > 0) {\n    console.log('surplus', surplus)\n    distributed = distributeSurplus(votes, counts[counts.length - 1], surplus);\n    surplus = {};\n  }\n\n  let roundCounts = {};\n  let roundElected = [];\n  let hasElected = false;\n\n  for (let v of hopefuls) {\n    let count = 0;\n    if (counts.length === 0) {\n      count = countPref(1, v, votes);\n    } else {\n      count = distributed[v];\n    }\n    roundCounts[v] = count;\n    if (count >= quota) {\n      roundElected.push(v);\n      elected.push(v);\n      hopefuls = hopefuls.filter(e => e !== v);\n    }\n  }\n\n  let excluded = [...elected, ...eliminated];\n  if (roundElected.length === 0) {\n    let elimCand = eliminate(votes, '', roundCounts, hopefuls, excluded,\n    surplus, counts);\n    eliminated.push(elimCand);\n  } else {\n    roundElected.forEach(v => {\n      console.log('elected', v)\n      eliminate(votes, v, roundCounts, hopefuls, excluded,\n        surplus, counts, roundCounts[v] - quota);\n    });\n  }\n\n  counts.push(roundCounts);\n  console.log('round count', roundCounts);\n  console.log('round', ++num);\n  return round(votes, seats, quota, hopefuls, eliminated, elected, counts,\n    surplus);\n}\n\nfunction countSurplus(votes, candidate, hopefuls, excluded) {\n  let surplus = {};\n  let transferred = _.cloneDeep(votes).filter((val, ind, arr) => {\n    if (val[0] === candidate) return true;\n    return false;\n  });\n  let total = transferred.length;\n\n  for (let exclude of excluded) {\n    transferred.forEach((val, ind, arr) => {\n      transferred[ind] = val.filter(e => e !== exclude);\n    });\n  }\n\n  for (let hopeful of hopefuls) {\n    surplus[hopeful] = countPref(1, hopeful, transferred);\n  }\n\n  return {\n    dist: surplus,\n    total,\n  };\n}\nfunction distributeSurplus(votes, lastCounts, surplus) {\n  let count = Object.assign({}, lastCounts);\n  for (let candidate in surplus) {\n    if (surplus.hasOwnProperty(candidate)) {\n      let dist = surplus[candidate].dist;\n      let value = surplus[candidate].surplus / surplus[candidate].total;\n\n      for (let transfer in dist) {\n        if (dist.hasOwnProperty(transfer)) {\n          count[transfer] += (dist[transfer] * value).round(PRECISION);\n        }\n      }\n    }\n  }\n  return count;\n}\n\nfunction eliminate(votes, candidate, roundCounts, hopefuls, excluded,\nsurplus, counts, surplusVotes = 0) {\n  if (candidate === '') {\n    candidate = Object.keys(roundCounts);\n    let minVotes = _.min(_.values(roundCounts));\n    let potentials = [];\n    candidate.forEach(function(val, ind) {\n      if (roundCounts[val] === minVotes) {\n        potentials.push(ind);\n      }\n    });\n    if (potentials.length <= 0)\n      console.error('case 1. unable to continue elimination');\n    if (potentials.length === 1) {\n      candidate = candidate[potentials[0]];\n    } else {\n      candidate = breakTie(potentials, counts);\n    }\n    excluded.push(candidate);\n    hopefuls = hopefuls.filter(e => e !== candidate);\n  }\n\n  surplus[candidate] = countSurplus(votes, candidate, hopefuls, excluded);\n  surplus[candidate].surplus = surplusVotes || roundCounts[candidate];\n\n  votes.forEach((val, ind, arr) => {\n    votes[ind] = val.filter(e => e !== candidate);\n  });\n\n  return candidate;\n}\n\n/**\n * Breaks a tie in elimination step by returning the candidate with lowest\n * number of votes in the last round; if fails to break after counting all\n * previous rounds, a random candidate is returned\n * @param  {string[]} potentials List of tied candidates\n * @param  {Object[]} counts     History of votes received by the candidates in\n * previous rounds\n * @return {string}            Candidate to be eliminated after breaking the tie\n */\nfunction breakTie(potentials, counts) {\n  console.error('a tie!');\n  if (counts.length > 0) {\n    let lastCount = counts[counts.length - 1];\n    let lastCounts = _.pick(lastCount, potentials);\n    let minVotes = _.min(_.values(lastCounts));\n    let potentialsTie = potentials.reduce(function(prev, curr, ind, arr) {\n      if (curr === minVotes) {\n        prev.push(ind);\n      }\n      return prev;\n    }, []);\n    if (potentialsTie.length <= 0)\n      console.error('unable to continue elimination');\n    if (potentialsTie.length === potentials.length) {\n      return potentials[Math.floor(Math.random() * potentials.length)];\n    }\n    if (potentialsTie.length === 1) {\n      return potentials[potentialsTie[0]];\n    }\n    return breakTie(potentialsTie, counts.slice(0, -1));\n  }\n}\n\nfunction test() {\n  let votes_ = [];\n  let candidates_ = ['a', 'b', 'c', 'd'];\n  let seats_ = 3;\n  const [a, b, c, d] = candidates_;\n\n  votes_ = populate([\n    [4, [a,b,c,d]],\n    [1, [a,c,d,b]],\n    [2, [b,a,d,c]],\n    [3, [b,a,c,d]],\n    [5, [a,d,b,c]],\n    [4, [c,b,d,a]],\n    [5, [d,c,b,a]],\n  ]);\n\n  let quota_ = Math.floor(votes_.length / (seats_ + 1) + 1); // Droop\n  const PRECISION = 6;\n  let result = round(votes_, seats_, quota_, candidates_, [], [], []);\n\n  console.log('votes #', votes_.length);\n  console.log('quota', quota_);\n  console.log('counts', result.counts);\n  console.log('elected', result.elected);\n}\n"],"sourceRoot":"/source/"}