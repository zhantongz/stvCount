{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;AAAA;;AACA;;;;;;;;AAEA,SAAS,QAAT,CAAkB,KAAlB,EAAyB;AACvB,MAAI,YAAY,EAAhB;AADuB;AAAA;AAAA;;AAAA;AAEvB,yBAAiB,KAAjB,8HAAwB;AAAA,UAAf,IAAe;;AACtB,YAAM,KAAK,CAAL,CAAN,EAAe,IAAf,CAAoB,KAAK,CAAL,CAApB,EAA6B,OAA7B,CAAqC;AAAA,eAAK,UAAU,IAAV,CAAe,CAAf,CAAL;AAAA,OAArC;AACD;AAJsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKvB,SAAO,SAAP;AACD;;AAED,OAAO,SAAP,CAAiB,KAAjB,GAAyB,UAAS,MAAT,EAAiB;AACxC,SAAO,EAAE,KAAK,KAAL,CAAW,OAAO,IAAP,GAAc,MAAzB,IAAoC,IAApC,GAA2C,MAA7C,CAAP;AACD,CAFD;;;;;;;;;;;;;;;;;;AAoBA,SAAS,SAAT,CAAmB,IAAnB,EAAyB,IAAzB,EAA+B,KAA/B,EAAsC;AACpC,MAAI,QAAQ,CAAZ;AACA,QAAM,OAAN,CAAc,UAAC,CAAD,EAAI,CAAJ,EAAO,GAAP,EAAe;AAC3B,QAAI,EAAE,OAAO,CAAT,MAAgB,IAApB,EAA0B;AAC3B,GAFD;AAGA,SAAO,KAAP;AACD;;;;;;;;;;;;;;;;;;AAkBD,SAAS,KAAT,CAAe,KAAf,EAAsB,KAAtB,EACc;AAAA,MADe,KACf,yDADuB,CAAC,CACxB;AAAA,MAD2B,QAC3B;AAAA,MADqC,UACrC;AAAA,MADiD,OACjD;AAAA,MAD0D,MAC1D;AAAA,MAAd,OAAc,yDAAJ,EAAI;;AACZ,MAAI,QAAQ,MAAR,KAAmB,KAAvB,EAA8B;AAC5B,WAAO;AACL,sBADK;AAEL;AAFK,KAAP;AAID;;AAED,MAAI,SAAS,MAAT,IAAmB,QAAQ,QAAQ,MAAvC,EAA+C;AAC7C,2CAAc,OAAd,sBAA0B,QAA1B;AACA,WAAO;AACL,sBADK;AAEL;AAFK,KAAP;AAID;;AAED,MAAI,UAAU,CAAC,CAAf,EAAkB;AAChB,YAAQ,KAAK,KAAL,CAAW,MAAM,MAAN,IAAgB,QAAQ,CAAxB,IAA6B,CAAxC,CAAR;AACD;AACD,MAAI,cAAc,EAAlB;AACA,MAAI,OAAO,IAAP,CAAY,OAAZ,EAAqB,MAArB,GAA8B,CAAlC,EAAqC;AACnC,YAAQ,GAAR,CAAY,SAAZ,EAAuB,OAAvB;AACA,kBAAc,kBAAkB,KAAlB,EAAyB,OAAO,OAAO,MAAP,GAAgB,CAAvB,CAAzB,EAAoD,OAApD,CAAd;AACA,cAAU,EAAV;AACD;;AAED,MAAI,cAAc,EAAlB;AACA,MAAI,eAAe,EAAnB;AACA,MAAI,aAAa,KAAjB;;AA5BY;AAAA;AAAA;;AAAA;AAAA;AAAA,UA8BH,CA9BG;;AA+BV,UAAI,QAAQ,CAAZ;AACA,UAAI,OAAO,MAAP,KAAkB,CAAtB,EAAyB;AACvB,gBAAQ,UAAU,CAAV,EAAa,CAAb,EAAgB,KAAhB,CAAR;AACD,OAFD,MAEO;AACL,gBAAQ,YAAY,CAAZ,CAAR;AACD;AACD,kBAAY,CAAZ,IAAiB,KAAjB;AACA,UAAI,SAAS,KAAb,EAAoB;AAClB,qBAAa,IAAb,CAAkB,CAAlB;AACA,gBAAQ,IAAR,CAAa,CAAb;AACA,mBAAW,SAAS,MAAT,CAAgB;AAAA,iBAAK,MAAM,CAAX;AAAA,SAAhB,CAAX;AACD;AA1CS;;AA8BZ,0BAAc,QAAd,mIAAwB;AAAA;AAavB;AA3CW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA6CZ,MAAI,wCAAe,OAAf,sBAA2B,UAA3B,EAAJ;AACA,MAAI,aAAa,MAAb,KAAwB,CAA5B,EAA+B;AAAA;AAC7B,UAAI,WAAW,UAAU,KAAV,EAAiB,EAAjB,EAAqB,WAArB,EAAkC,QAAlC,EAA4C,QAA5C,EACf,OADe,EACN,MADM,CAAf;AAEA,iBAAW,IAAX,CAAgB,QAAhB;AACA,iBAAW,SAAS,MAAT,CAAgB;AAAA,eAAK,MAAM,QAAX;AAAA,OAAhB,CAAX;AACA,cAAQ,GAAR,CAAY,YAAZ,EAA0B,UAA1B;AAL6B;AAM9B,GAND,MAMO;AACL,iBAAa,OAAb,CAAqB,aAAK;AACxB,cAAQ,GAAR,CAAY,SAAZ,EAAuB,CAAvB;AACA,gBAAU,KAAV,EAAiB,CAAjB,EAAoB,WAApB,EAAiC,QAAjC,EAA2C,QAA3C,EACE,OADF,EACW,MADX,EACmB,YAAY,CAAZ,IAAiB,KADpC;AAED,KAJD;AAKD;;AAED,SAAO,IAAP,CAAY,WAAZ;AACA,UAAQ,GAAR,CAAY,aAAZ,EAA2B,WAA3B;AACA,UAAQ,GAAR,CAAY,OAAZ,EAAqB,OAAO,MAA5B;AACA,MAAI,OAAO,MAAP,GAAgB,EAApB,EAAwB,CAAE,CAA1B,MAAgC;AAAC;AAAQ;AACzC,SAAO,MAAM,KAAN,EAAa,KAAb,EAAoB,KAApB,EAA2B,QAA3B,EAAqC,UAArC,EAAiD,OAAjD,EAA0D,MAA1D,EACL,OADK,CAAP;AAED;;AAED,SAAS,YAAT,CAAsB,KAAtB,EAA6B,SAA7B,EAAwC,QAAxC,EAAkD,QAAlD,EAA4D;AAC1D,MAAI,UAAU,EAAd;AACA,MAAI,cAAc,iBAAE,SAAF,CAAY,KAAZ,EAAmB,MAAnB,CAA0B,UAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAmB;AAC7D,QAAI,IAAI,CAAJ,MAAW,SAAf,EAA0B,OAAO,IAAP;AAC1B,WAAO,KAAP;AACD,GAHiB,CAAlB;AAIA,MAAI,QAAQ,YAAY,MAAxB;;AAN0D;AAAA;AAAA;;AAAA;AAAA;AAAA,UAQjD,OARiD;;AASxD,kBAAY,OAAZ,CAAoB,UAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAmB;AACrC,oBAAY,GAAZ,IAAmB,IAAI,MAAJ,CAAW;AAAA,iBAAK,MAAM,OAAX;AAAA,SAAX,CAAnB;AACD,OAFD;AATwD;;AAQ1D,0BAAoB,QAApB,mIAA8B;AAAA;AAI7B;AAZyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAc1D,0BAAoB,QAApB,mIAA8B;AAAA,UAArB,OAAqB;;AAC5B,cAAQ,OAAR,IAAmB,UAAU,CAAV,EAAa,OAAb,EAAsB,WAAtB,CAAnB;AACD;AAhByD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkB1D,SAAO;AACL,UAAM,OADD;AAEL;AAFK,GAAP;AAID;AACD,SAAS,iBAAT,CAA2B,KAA3B,EAAkC,UAAlC,EAA8C,OAA9C,EAAuD;AACrD,MAAI,QAAQ,OAAO,MAAP,CAAc,EAAd,EAAkB,UAAlB,CAAZ;AACA,OAAK,IAAI,SAAT,IAAsB,OAAtB,EAA+B;AAC7B,QAAI,QAAQ,cAAR,CAAuB,SAAvB,CAAJ,EAAuC;AACrC,UAAI,OAAO,QAAQ,SAAR,EAAmB,IAA9B;AACA,UAAI,QAAQ,CAAZ;AACA,UAAI,QAAQ,SAAR,EAAmB,KAAnB,KAA6B,CAAjC,EAAoC;AAClC,gBAAQ,QAAQ,SAAR,EAAmB,OAAnB,GAA6B,QAAQ,SAAR,EAAmB,KAAxD;AACD;;AAED,WAAK,IAAI,QAAT,IAAqB,IAArB,EAA2B;AACzB,YAAI,KAAK,cAAL,CAAoB,QAApB,CAAJ,EAAmC;AACjC,gBAAM,QAAN,KAAmB,KAAK,QAAL,IAAiB,KAApC;AACA,gBAAM,QAAN,IAAkB,MAAM,QAAN,EAAgB,KAAhB,CAAsB,SAAtB,CAAlB;AACD;AACF;AACF;AACF;AACD,SAAO,KAAP;AACD;;AAED,SAAS,SAAT,CAAmB,KAAnB,EAA0B,SAA1B,EAAqC,WAArC,EAAkD,QAAlD,EAA4D,QAA5D,EACA,OADA,EACS,MADT,EACmC;AAAA,MAAlB,YAAkB,yDAAH,CAAG;;AACjC,MAAI,cAAc,EAAlB,EAAsB;AAAA;AACpB,kBAAY,OAAO,IAAP,CAAY,WAAZ,CAAZ;AACA,UAAI,WAAW,iBAAE,GAAF,CAAM,iBAAE,MAAF,CAAS,WAAT,CAAN,CAAf;AACA,UAAI,aAAa,EAAjB;AACA,gBAAU,OAAV,CAAkB,UAAS,GAAT,EAAc,GAAd,EAAmB;AACnC,YAAI,YAAY,GAAZ,MAAqB,QAAzB,EAAmC;AACjC,qBAAW,IAAX,CAAgB,GAAhB;AACD;AACF,OAJD;AAKA,UAAI,WAAW,MAAX,IAAqB,CAAzB,EACE,QAAQ,KAAR,CAAc,wCAAd;AACF,UAAI,WAAW,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,oBAAY,UAAU,WAAW,CAAX,CAAV,CAAZ;AACD,OAFD,MAEO;AACL,YAAI,iBAAiB,EAArB;AADK;AAAA;AAAA;;AAAA;AAEL,gCAAgB,UAAhB,mIAA4B;AAAA,gBAAnB,GAAmB;;AAC1B,2BAAe,IAAf,CAAoB,UAAU,GAAV,CAApB;AACD;AAJI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKL,oBAAY,SAAS,cAAT,EAAyB,MAAzB,CAAZ;AACD;AACD,eAAS,IAAT,CAAc,SAAd;AACA,iBAAW,SAAS,MAAT,CAAgB;AAAA,eAAK,MAAM,SAAX;AAAA,OAAhB,CAAX;AArBoB;AAsBrB;;AAED,UAAQ,SAAR,IAAqB,aAAa,KAAb,EAAoB,SAApB,EAA+B,QAA/B,EAAyC,QAAzC,CAArB;AACA,UAAQ,SAAR,EAAmB,OAAnB,GAA6B,gBAAgB,YAAY,SAAZ,CAA7C;;AAEA,QAAM,OAAN,CAAc,UAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAmB;AAC/B,UAAM,GAAN,IAAa,IAAI,MAAJ,CAAW;AAAA,aAAK,MAAM,SAAX;AAAA,KAAX,CAAb;AACD,GAFD;;AAIA,SAAO,SAAP;AACD;;;;;;;;;;;AAWD,SAAS,QAAT,CAAkB,UAAlB,EAA8B,MAA9B,EAAsC;AACpC,UAAQ,KAAR,CAAc,QAAd;AACA,MAAI,OAAO,MAAP,GAAgB,CAApB,EAAuB;AAAA;AACrB,UAAI,YAAY,OAAO,OAAO,MAAP,GAAgB,CAAvB,CAAhB;AACA,UAAI,aAAa,iBAAE,IAAF,CAAO,SAAP,EAAkB,UAAlB,CAAjB;AACA,UAAI,WAAW,iBAAE,GAAF,CAAM,iBAAE,MAAF,CAAS,UAAT,CAAN,CAAf;AACA,UAAI,gBAAgB,EAApB;AACA,iBAAW,OAAX,CAAmB,UAAS,GAAT,EAAc,GAAd,EAAmB;AACpC,YAAI,WAAW,GAAX,MAAoB,QAAxB,EAAkC;AAChC,wBAAc,IAAd,CAAmB,GAAnB;AACD;AACF,OAJD;AAKA,UAAI,cAAc,MAAd,IAAwB,CAA5B,EACE,QAAQ,KAAR,CAAc,gCAAd;AACF,UAAI,cAAc,MAAd,KAAyB,WAAW,MAAxC,EAAgD;AAC9C;AAAA,aAAO,WAAW,KAAK,KAAL,CAAW,KAAK,MAAL,KAAgB,WAAW,MAAtC,CAAX;AAAP;AACD;AACD,UAAI,cAAc,MAAd,KAAyB,CAA7B,EAAgC;AAC9B;AAAA,aAAO,WAAW,cAAc,CAAd,CAAX;AAAP;AACD;AACD,UAAI,iBAAiB,EAArB;AACA,WAAK,IAAI,GAAT,IAAgB,aAAhB,EAA+B;AAC7B,uBAAe,IAAf,CAAoB,WAAW,GAAX,CAApB;AACD;AACD;AAAA,WAAO,SAAS,cAAT,EAAyB,OAAO,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB,CAAzB;AAAP;AAtBqB;;AAAA;AAuBtB;AACF;;AAED,SAAS,KAAT,OAAkD;AAAA,MAAlC,KAAkC,QAAlC,KAAkC;AAAA,MAA3B,UAA2B,QAA3B,UAA2B;AAAA,MAAf,KAAe,QAAf,KAAe;AAAA,MAAR,KAAQ,QAAR,KAAQ;;AAChD,MAAI,QAAQ,CAAZ,EAAe,QAAQ,KAAK,KAAL,CAAW,MAAM,MAAN,IAAgB,QAAQ,CAAxB,IAA6B,CAAxC,CAAR;AACf,MAAI,SAAS,MAAM,KAAN,EAAa,KAAb,EAAoB,KAApB,EAA2B,UAA3B,EAAuC,EAAvC,EAA2C,EAA3C,EAA+C,EAA/C,CAAb;;AAEA,UAAQ,GAAR,CAAY,UAAZ,EAAwB,MAAM,MAA9B;AACA,UAAQ,GAAR,CAAY,QAAZ,EAAsB,KAAtB;AACA,UAAQ,GAAR,CAAY,SAAZ,EAAuB,OAAO,MAA9B;AACA,UAAQ,GAAR,CAAY,UAAZ,EAAwB,OAAO,OAA/B;AACA,SAAO,MAAP;AACD;;AAED,IAAI,UAAU,QAAQ,iBAAR,CAAd;AACA,IAAM,YAAY,QAAQ,SAAR,IAAqB,CAAvC;AACA,IAAM,YAAY,QAAQ,WAAR,EAAqB,SAAvC;AACA,IAAM,YAAY,IAAI,SAAJ,CAAc,EAAd,CAAlB;;AAEA,UAAU,EAAV,CAAa,YAAb,EAA2B,qBAAa;AACtC,MAAI,QAAQ,EAAZ;AACA,MAAI,MAAM,CAAV;AAFsC;AAAA;AAAA;;AAAA;AAAA;AAAA,UAG7B,IAH6B;;AAIpC,aAAO,iBAAE,MAAF,CAAS,IAAT,EAAe,iBAAE,QAAjB,CAAP;AACA,UAAI,YAAY,OAAO,IAAP,CAAY,IAAZ,EAAkB,IAAlB,CAAuB,UAAC,CAAD,EAAI,CAAJ;AAAA,eAAU,KAAK,CAAL,IAAU,KAAK,CAAL,CAApB;AAAA,OAAvB,CAAhB;AACA,UAAI,OAAO,EAAX;AANoC;AAAA;AAAA;;AAAA;AAOpC,8BAAc,SAAd;AAAA,cAAS,CAAT;;AACE,eAAK,KAAK,IAAL,CAAU,CAAV,CAAL;AADF;AAPoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUpC,kBAAY,IAAZ;AACA,YAAM,KAAN,IAAe,SAAf;AAXoC;;AAGtC,0BAAiB,SAAjB,mIAA4B;AAAA;AAS3B;AAZqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAatC,UAAQ,KAAR,GAAgB,KAAhB;AACA,QAAM,OAAN;AACD,CAfD;;AAiBA,QAAQ,IAAR,EAAc,gBAAd,CAA+B,aAA/B,EAA8C,IAA9C,CAAmD,SAAnD","file":"all.js","sourcesContent":["import 'babel-polyfill';\nimport _ from 'lodash'\n\nfunction populate(votes) {\n  let populated = [];\n  for (let vote of votes) {\n    Array(vote[0]).fill(vote[1]).forEach(v => populated.push(v));\n  }\n  return populated;\n}\n\nNumber.prototype.round = function(places) {\n  return +(Math.round(this + 'e+' + places)  + 'e-' + places);\n}\n\n/**\n * A single transferrable vote, containing an array of names of candidates\n * (`string`s) in order of preference indicated, i.e. first-preference vote is\n * at index `0`.\n * @typedef {string[][]} vote\n */\n\n/**\n * Counts a candidate's votes in a position on ranked ballot\n * @param {number} pref The position of preference at which the votes for the\n * candidate is counted, e.g. `pref = 1` to count first-preference votes\n * @param {string} cand Name of the candidate\n * @param {vote[]} votes Votes to be counted\n * @returns {number} Number of votes the candidate receives at the specified\n * position on the ballot\n */\nfunction countPref(pref, cand, votes) {\n  let count = 0;\n  votes.forEach((v, i, arr) => {\n    if (v[pref - 1] === cand) count++;\n  });\n  return count;\n}\n\n/**\n * Does a round of counting for STV\n * @param  {vote[]} votes    Votes to be counted\n * @param  {number} seats    Number of seats available\n * @param  {number} [quota] Quota needed to declared a candidate elected;\n * defaults to Droop quota calculated from `votes.length` and `seats`\n * @param  {string[]} hopefuls List of candidates to be counted, i.e. neither\n * elected nor eliminated\n * @param  {string[]} eliminated List of candidates eliminated from counting\n * @param  {string[]} elected  List of already elected candidates\n * @param  {Object[]} counts   History of votes received by the candidates in\n * previous rounds\n * @param  {Object} [surplus = {}] Surplus votes to be redistributed from last\n * round; defaults to `{}`\n * @return {string[]}          List of all elected candidates after this round\n */\nfunction round(votes, seats, quota = -1, hopefuls, eliminated, elected, counts,\nsurplus = {}) {\n  if (elected.length === seats) {\n    return {\n      elected,\n      counts,\n    }\n  }\n\n  if (hopefuls.length <= seats - elected.length) {\n    elected = [...elected, ...hopefuls];\n    return {\n      elected,\n      counts,\n    }\n  }\n\n  if (quota === -1) {\n    quota = Math.floor(votes.length / (seats + 1) + 1);\n  }\n  let distributed = {};\n  if (Object.keys(surplus).length > 0) {\n    console.log('surplus', surplus)\n    distributed = distributeSurplus(votes, counts[counts.length - 1], surplus);\n    surplus = {};\n  }\n\n  let roundCounts = {};\n  let roundElected = [];\n  let hasElected = false;\n\n  for (let v of hopefuls) {\n    let count = 0;\n    if (counts.length === 0) {\n      count = countPref(1, v, votes);\n    } else {\n      count = distributed[v];\n    }\n    roundCounts[v] = count;\n    if (count >= quota) {\n      roundElected.push(v);\n      elected.push(v);\n      hopefuls = hopefuls.filter(e => e !== v);\n    }\n  }\n\n  let excluded = [...elected, ...eliminated];\n  if (roundElected.length === 0) {\n    let elimCand = eliminate(votes, '', roundCounts, hopefuls, excluded,\n    surplus, counts);\n    eliminated.push(elimCand);\n    hopefuls = hopefuls.filter(e => e !== elimCand);\n    console.log('eliminated', eliminated);\n  } else {\n    roundElected.forEach(v => {\n      console.log('elected', v)\n      eliminate(votes, v, roundCounts, hopefuls, excluded,\n        surplus, counts, roundCounts[v] - quota);\n    });\n  }\n\n  counts.push(roundCounts);\n  console.log('round count', roundCounts);\n  console.log('round', counts.length);\n  if (counts.length < 20) {} else {return;}\n  return round(votes, seats, quota, hopefuls, eliminated, elected, counts,\n    surplus);\n}\n\nfunction countSurplus(votes, candidate, hopefuls, excluded) {\n  let surplus = {};\n  let transferred = _.cloneDeep(votes).filter((val, ind, arr) => {\n    if (val[0] === candidate) return true;\n    return false;\n  });\n  let total = transferred.length;\n\n  for (let exclude of excluded) {\n    transferred.forEach((val, ind, arr) => {\n      transferred[ind] = val.filter(e => e !== exclude);\n    });\n  }\n\n  for (let hopeful of hopefuls) {\n    surplus[hopeful] = countPref(1, hopeful, transferred);\n  }\n\n  return {\n    dist: surplus,\n    total,\n  };\n}\nfunction distributeSurplus(votes, lastCounts, surplus) {\n  let count = Object.assign({}, lastCounts);\n  for (let candidate in surplus) {\n    if (surplus.hasOwnProperty(candidate)) {\n      let dist = surplus[candidate].dist;\n      let value = 0;\n      if (surplus[candidate].total !== 0) {\n        value = surplus[candidate].surplus / surplus[candidate].total;\n      }\n\n      for (let transfer in dist) {\n        if (dist.hasOwnProperty(transfer)) {\n          count[transfer] += dist[transfer] * value;\n          count[transfer] = count[transfer].round(PRECISION);\n        }\n      }\n    }\n  }\n  return count;\n}\n\nfunction eliminate(votes, candidate, roundCounts, hopefuls, excluded,\nsurplus, counts, surplusVotes = 0) {\n  if (candidate === '') {\n    candidate = Object.keys(roundCounts);\n    let minVotes = _.min(_.values(roundCounts));\n    let potentials = [];\n    candidate.forEach(function(val, ind) {\n      if (roundCounts[val] === minVotes) {\n        potentials.push(ind);\n      }\n    });\n    if (potentials.length <= 0)\n      console.error('case 1. unable to continue elimination');\n    if (potentials.length === 1) {\n      candidate = candidate[potentials[0]];\n    } else {\n      let potentialCands = [];\n      for (let ind of potentials) {\n        potentialCands.push(candidate[ind])\n      }\n      candidate = breakTie(potentialCands, counts);\n    }\n    excluded.push(candidate);\n    hopefuls = hopefuls.filter(e => e !== candidate);\n  }\n\n  surplus[candidate] = countSurplus(votes, candidate, hopefuls, excluded);\n  surplus[candidate].surplus = surplusVotes || roundCounts[candidate];\n\n  votes.forEach((val, ind, arr) => {\n    votes[ind] = val.filter(e => e !== candidate);\n  });\n\n  return candidate;\n}\n\n/**\n * Breaks a tie in elimination step by returning the candidate with lowest\n * number of votes in the last round; if fails to break after counting all\n * previous rounds, a random candidate is returned\n * @param  {string[]} potentials List of tied candidates\n * @param  {Object[]} counts     History of votes received by the candidates in\n * previous rounds\n * @return {string}            Candidate to be eliminated after breaking the tie\n */\nfunction breakTie(potentials, counts) {\n  console.error('a tie!');\n  if (counts.length > 0) {\n    let lastCount = counts[counts.length - 1];\n    let lastCounts = _.pick(lastCount, potentials);\n    let minVotes = _.min(_.values(lastCounts));\n    let potentialsTie = [];\n    potentials.forEach(function(val, ind) {\n      if (lastCounts[val] === minVotes) {\n        potentialsTie.push(ind);\n      }\n    });\n    if (potentialsTie.length <= 0)\n      console.error('unable to continue elimination');\n    if (potentialsTie.length === potentials.length) {\n      return potentials[Math.floor(Math.random() * potentials.length)];\n    }\n    if (potentialsTie.length === 1) {\n      return potentials[potentialsTie[0]];\n    }\n    let potentialCands = [];\n    for (let ind in potentialsTie) {\n      potentialCands.push(potentials[ind])\n    }\n    return breakTie(potentialCands, counts.slice(0, -1));\n  }\n}\n\nfunction count({votes, candidates, seats, quota}) {\n  if (quota < 0) quota = Math.floor(votes.length / (seats + 1) + 1);\n  let result = round(votes, seats, quota, candidates, [], [], []);\n\n  console.log('votes #:', votes.length);\n  console.log('quota:', quota);\n  console.log('counts:', result.counts);\n  console.log('elected:', result.elected);\n  return result;\n}\n\nlet options = require('../options.json');\nconst PRECISION = options.precision || 6;\nconst Converter = require('csvtojson').Converter;\nconst converter = new Converter({});\n\nconverter.on('end_parsed', jsonArray => {\n  let votes = [];\n  let ind = 0;\n  for (let vote of jsonArray) {\n    vote = _.pickBy(vote, _.identity);\n    let voteArray = Object.keys(vote).sort((a, b) => vote[a] - vote[b]);\n    let temp = [];\n    for (let i of voteArray)\n      i && temp.push(i);\n\n    voteArray = temp;\n    votes[ind++] = voteArray;\n  }\n  options.votes = votes;\n  count(options);\n});\n\nrequire('fs').createReadStream('./votes.csv').pipe(converter);\n"],"sourceRoot":"/source/"}