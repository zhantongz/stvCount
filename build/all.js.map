{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"all.js","sourcesContent":["const VERSION = 'v16.05.1'\n\nimport 'babel-polyfill';\nimport chalk from 'chalk';\nimport Table from 'cli-table';\nconst Converter = require('csvtojson').Converter;\n\nlet logging = true;\nconst log_ = (...args) => logging ? console.log(...args) : {};\nconst logTrue = (...args) => console.log(...args);\n\nlet precision = 6;\n\nfunction populate(votes) {\n  let populated = [];\n  for (let vote of votes) {\n    Array(vote[0]).fill(vote[1]).forEach(v => populated.push(v));\n  }\n  return populated;\n}\n\nNumber.prototype.round = function(places) {\n  return +(Math.round(this + 'e+' + places)  + 'e-' + places);\n}\n\nfunction getValues(object) {\n  let values = new Array;\n  for (let prop in object) {\n    values.push(object[prop]);\n  }\n  return values;\n}\n\nfunction getMin(array) {\n  return array.reduce((a, b) => Math.min(a, b));\n}\n\nfunction pick(object, ...fields) {\n  let o = {};\n  for (let field of fields) {\n    Object.assign(o, {[field]: object[field]});\n  }\n\n  return o;\n}\n\nfunction removeBlanks(object) {\n  return pick(object,\n    ...Object.keys(object).filter(key => object[key] || object[key] === 0));\n}\n\nfunction countPref(pref, cand, votes) {\n  let count = 0;\n  votes.forEach((v, i, arr) => {\n    if (v[pref - 1] === cand) count++;\n  });\n  return count;\n}\n\nfunction getPref(pref, cand, votes) {\n  let count = [];\n  votes.forEach((v, i, arr) => {\n    if (v[pref - 1] === cand) count.push(i);\n  });\n  return count;\n}\n\nfunction round(votes, values, seats, quota, hopefuls, eliminated, elected,\n  counts, surplus = {}, ron = '') {\n  if (elected.length === seats) {\n    log_('<all vacancies filled>')\n    logTrue('********** COUNTING ENDS **********');\n    return {\n      elected,\n      counts,\n    }\n  }\n\n  if (hopefuls.length <= seats - elected.length) {\n    log_('<remaining candidates can fill all vacancies>')\n    hopefuls.forEach(v => {\n      elected.push(v);\n      log_(chalk.white.bgGreen('----- elected', v, '-----'));\n    });\n    logTrue('********** COUNTING ENDS **********');\n    return {\n      elected,\n      counts,\n    };\n  }\n\n  log_('########## ROUND', counts.length + 1, '##########');\n\n  let distributed = {};\n  if (Object.keys(surplus).length > 0) {\n    distributed = distributeSurplus(votes, values, counts[counts.length - 1],\n      surplus);\n    surplus = {};\n  }\n\n  let roundCount = {};\n  let roundElected = [];\n  let hasElected = false;\n\n  for (let v of hopefuls) {\n    let count = 0;\n    if (counts.length === 0) {\n      count = countPref(1, v, votes);\n    } else {\n      count = distributed[v];\n    }\n    roundCount[v] = count;\n    if (count >= quota) {\n      roundElected.push(v);\n      elected.push(v);\n      hopefuls = hopefuls.filter(h => h !== v);\n    }\n  }\n\n  counts.push(roundCount);\n  log_('+++++ round count +++++');\n  roundCountTable(roundCount);\n\n  let excluded = [...elected, ...eliminated];\n  if (roundElected.length === 0) {\n    let elimCand = eliminate(votes, values, '', roundCount, hopefuls, excluded,\n    surplus, counts, ron);\n    eliminated.push(elimCand);\n    hopefuls = hopefuls.filter(v => v !== elimCand);\n    log_(chalk.gray.bgYellow('----- eliminated', elimCand, '-----'));\n  } else {\n    roundElected.forEach(v => {\n      log_(chalk.white.bgGreen('----- elected', v, '-----'));\n      eliminate(votes, values, v, roundCount, hopefuls, excluded, surplus,\n        counts, ron, roundCount[v] - quota);\n    });\n  }\n\n  if (counts.length < 20) {} else {return;}\n  return round(votes, values, seats, quota, hopefuls, eliminated, elected,\n    counts, surplus, ron);\n}\n\nfunction countSurplus(votes, values, candidate, hopefuls, excluded) {\n  let surplus = {};\n  let transferred = votes.map((val, ind, arr) => {\n    if (val[0] === candidate) return val.slice();\n    return [];\n  });\n  let total = transferred.length;\n\n  for (let exclude of excluded) {\n    transferred.forEach((val, ind, arr) => {\n      transferred[ind] = val.filter(v => v !== exclude);\n    });\n  }\n\n  for (let hopeful of hopefuls) {\n    surplus[hopeful] = getPref(1, hopeful, transferred);\n  }\n\n  return {\n    dist: surplus,\n  };\n}\n\nfunction distributeSurplus(votes, values, lastCounts, surplus) {\n  let count = Object.assign({}, lastCounts);\n  let totalTransferred = {};\n  for (let candidate in surplus) {\n    if (surplus.hasOwnProperty(candidate)) {\n      totalTransferred = 0;\n      let tableCount = {};\n      let dist = surplus[candidate].dist;\n      if (surplus[candidate].surplus < count[candidate]) {\n        if (count[candidate] > 0) {\n          let value = surplus[candidate].surplus / count[candidate];\n          for (let transfer in dist) {\n            if (dist.hasOwnProperty(transfer)) {\n              for (let nextPref of dist[transfer]) {\n                values[nextPref] *= value;\n              }\n            }\n          }\n        }\n      }\n\n      log_(chalk.magenta('----- distributing surplus -----'));\n      for (let transfer in dist) {\n        if (dist.hasOwnProperty(transfer)) {\n          tableCount[transfer] = 0;\n          for (let nextPref of dist[transfer]) {\n            count[transfer] += values[nextPref];\n\n            tableCount[transfer] += values[nextPref];\n            totalTransferred += values[nextPref];\n          }\n          count[transfer] = count[transfer].round(precision);\n        }\n      }\n\n      log_(chalk.bold(candidate));\n      for (let transfer in tableCount) {\n        if (tableCount[transfer])\n          log_('- transfers', chalk.underline(tableCount[transfer]),\n            'vote(s) to', chalk.underline(transfer));\n      }\n\n      log_('-', chalk.bold('Transfer in total:'),\n        chalk.underline(totalTransferred), chalk.bold('Exhausted:'),\n        chalk.underline(surplus[candidate].surplus - totalTransferred));\n\n    }\n  }\n  return count;\n}\n\nfunction eliminate(votes, values, candidate, roundCount, hopefuls, excluded,\nsurplus, counts, ron, surplusVotes = null) {\n  if (candidate === '') {\n    candidate = Object.keys(roundCount).filter(v => v !== ron);\n    let minVotes = 0;\n    if (!ron) {\n      minVotes = getMin(getValues(roundCount));\n    } else {\n      let roundCount_ = Object.assign({}, roundCount);\n      if (roundCount_.hasOwnProperty(ron)) {\n        delete roundCount_[ron];\n      } else {\n        console.error(chalk.bold.red('***** RON candidate not found *****'));\n      }\n      minVotes = getMin(getValues(roundCount_));\n    }\n    let potentials = [];\n    candidate.forEach(function(val, ind) {\n      if (roundCount[val] === minVotes) {\n        potentials.push(ind);\n      }\n    });\n    if (potentials.length <= 0)\n      console.error(chalk.bold.red(\n        '********** unable to continue elimination **********'));\n    if (potentials.length === 1) {\n      candidate = candidate[potentials[0]];\n    } else {\n      let potentialCands = [];\n      for (let ind of potentials) {\n        potentialCands.push(candidate[ind])\n      }\n      candidate = breakTie(potentialCands, counts);\n    }\n    excluded.push(candidate);\n    hopefuls = hopefuls.filter(v => v !== candidate);\n  }\n\n  surplus[candidate] = countSurplus(votes, values, candidate, hopefuls,\n    excluded);\n  surplus[candidate].surplus = surplusVotes !== null ?\n    surplusVotes : roundCount[candidate];\n\n  votes.forEach((val, ind, arr) => {\n    votes[ind] = val.filter(v => v !== candidate);\n  });\n\n  return candidate;\n}\n\nfunction breakTie(potentials, counts) {\n  log_('*a tie!*');\n  if (counts.length > 0) {\n    let lastCount = counts[counts.length - 1];\n    let lastCounts = pick(lastCount, ...potentials);\n    let minVotes = getMin(getValues(lastCounts));\n    let potentialsTie = [];\n    potentials.forEach(function(val, ind) {\n      if (lastCounts[val] === minVotes) {\n        potentialsTie.push(ind);\n      }\n    });\n    if (potentialsTie.length <= 0)\n      console.error('********** unable to continue elimination **********');\n    if (potentialsTie.length === potentials.length) {\n      let against = potentials[Math.floor(Math.random() * potentials.length)];\n      log_('----- tie randomly broken against', against, '-----');\n      return against;\n    }\n    if (potentialsTie.length === 1) {\n      let against = potentials[potentialsTie[0]];\n      log_('----- tie broken against', against, '-----');\n      return against;\n    }\n    let potentialCands = [];\n    for (let ind in potentialsTie) {\n      potentialCands.push(potentials[ind])\n    }\n    return breakTie(potentialCands, counts.slice(0, -1));\n  }\n}\n\nfunction roundCountTable(roundCount) {\n  let table = new Table();\n  for (let candidate in roundCount) {\n    table.push({\n      [chalk.cyan.bold(candidate)]: roundCount[candidate],\n    });\n  }\n  return log_(table.toString());\n}\n\nfunction countsTable(counts, elected) {\n  const isElected = candidate => elected.includes(candidate) ?\n    chalk.bold.green('✓') : chalk.bold.red('✗');\n  let table = new Table({\n    head: [chalk.blue.bold('Round'), ...Array.from(new Array(counts.length),\n      (x, i) => chalk.blue.bold(i + 1)), chalk.bold.green('Elected'),],\n  });\n\n  for (let candidate in counts[0]) {\n    table.push({\n      [chalk.cyan.bold(candidate)]: [...Array.from(new Array(counts.length),\n        (x, i) => candidate in counts[i] ?\n          counts[i][candidate] : isElected(candidate)),\n        isElected(candidate),],\n    })\n  }\n\n  return log_(table.toString());\n}\n\nfunction getCandidates(votes) {\n  return [...new Set([].concat(...votes))];\n}\n\nexport function count({votes, candidates, seats, quota, log, ron}) {\n  if (log === false) {\n    logging = false;\n  }\n\n  ron = ron || '';\n  logTrue(chalk.underline('stvCount', VERSION, '(c) Z. Tong Zhang'));\n  logTrue('********** COUNTING STARTS **********')\n\n  if (quota < 0) quota = Math.floor(votes.length / (seats + 1) + 1);\n  let values = new Array(votes.length).fill(1);\n  let result = round(votes, values, seats, quota, candidates, [], [], [], {},\n    ron);\n  log_('votes #:', votes.length);\n  log_('quota:', quota);\n  countsTable(result.counts, result.elected);\n\n  let elected = new Table({head: [chalk.bold.green('ELECTED')]});\n  result.elected.forEach(v => elected.push([v]));\n  log_(elected.toString());\n\n  return result;\n}\n\nexport function csvCount(csv, options) {\n  precision = options.precision || 6;\n  let converter = new Converter({});\n  converter.on('end_parsed', jsonArray => {\n    let votes = [];\n    let ind = 0;\n    for (let vote of jsonArray) {\n      vote = removeBlanks(vote);\n      let voteArray = Object.keys(vote).sort((a, b) => vote[a] - vote[b]);\n      let temp = [];\n      for (let i of voteArray)\n        i && temp.push(i);\n\n      voteArray = temp;\n      votes[ind++] = voteArray;\n    }\n    options.votes = votes;\n    options.candidates = getCandidates(votes);\n    return count(options);\n  });\n\n  if (typeof csv.pipe === 'function') {\n    csv.resume().pipe(converter);\n  } else if (typeof csv === 'string') {\n    converter.fromString(csv);\n  } else {\n    console.error('Error: CSV stream or string needed');\n  }\n}\n\nexport function jsonCount(json, options) {\n  precision = options.precision || 6;\n  options.votes = json;\n  options.candidates = getCandidates(json);\n\n  return count(options);\n}\n\nexport function bltCount(blt, options) {\n\n}\n"],"sourceRoot":"/source/"}